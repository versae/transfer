[
    {
        "pk": 1, 
        "model": "methods.function", 
        "fields": {
            "function": "binarize", 
            "inputs": 1, 
            "name": "Binarization", 
            "module": "segmentation.utils", 
            "arguments": "threshold=None, grayscale=True, rc=False", 
            "description": "Binarize the image input using by default the Otsu method.\r\n- threshold: integer. Threshold to overwrite the Otsu method.\r\n- grayscale: boolean. Define if the image must be returned like a posterized or not.\r\n- rc: boolean. Apply the Riddler-Calvard method."
        }
    }, 
    {
        "pk": 2, 
        "model": "methods.function", 
        "fields": {
            "function": "remove_foreground", 
            "inputs": 1, 
            "name": "Foreground removal", 
            "module": "segmentation.utils", 
            "arguments": "foreground_colour=(0, 0, 0), background_colour=(255, 255, 255), tolerance=2", 
            "description": "Remove a foreground colour from the image input. It's a own algorithm based of connected components detection and classification that aims to reduce the noise in the tipical foreground colour removal activity.\r\n- foreground_colour: integer tuple. Define a RGB colour using a 3-tuple of values in range from 0 to 255.\r\n- background_colour: integer tuple. Define a RGB colour using a 3-tuple of values in range from 0 to 255.\r\n- tolerance: integer/float. Define the tolerance to fill a pixel with the mode, foreground or median colour."
        }
    }, 
    {
        "pk": 3, 
        "model": "methods.function", 
        "fields": {
            "function": "extract_colours", 
            "inputs": 1, 
            "name": "Extract colours", 
            "module": "segmentation.utils", 
            "arguments": "k=None", 
            "description": "Posterize and extract the colours on the image input removing all gray levels.\r\n- k: integer. Define the size of neighborhood of a pixel in order to take de decission about removing it or not."
        }
    }, 
    {
        "pk": 4, 
        "model": "methods.function", 
        "fields": {
            "function": "convert", 
            "inputs": 1, 
            "name": "Mode conversor", 
            "module": "segmentation.utils", 
            "arguments": "mode=\"RGB\"", 
            "description": "Change the mode of the image among binary, grayscale and RGB.\r\n- mode: string. One of values \"1\" (binary), \"L\" (grayscale) and \"RGB\" (RGB)."
        }
    }, 
    {
        "pk": 5, 
        "model": "methods.function", 
        "fields": {
            "function": "equalize", 
            "inputs": 1, 
            "name": "Histogram equalization", 
            "module": "segmentation.utils", 
            "arguments": "", 
            "description": "Taken from http://effbot.org/zone/pil-histogram-equalization.htm"
        }
    }, 
    {
        "pk": 6, 
        "model": "methods.function", 
        "fields": {
            "function": "gaussian_filter", 
            "inputs": 1, 
            "name": "Gaussian filter", 
            "module": "segmentation.utils", 
            "arguments": "size=5", 
            "description": "- size: integer. Standard deviation of the Gaussian distribution."
        }
    }, 
    {
        "pk": 7, 
        "model": "methods.function", 
        "fields": {
            "function": "draw_regions", 
            "inputs": 2, 
            "name": "Draw filtered regions", 
            "module": "segmentation.utils", 
            "arguments": "outline=[\"green\", \"blue\", \"red\"], fill=[None, None, None], mode_pass=[False, False, False]", 
            "description": "Calculate the connected components of the second image argument and draw the classified connected components over the first image argument. Based on paper http://research.google.com/pubs/pub35094.html it analyze the connected components using a noise factor of 5.4264e-5, according the article, connected components with heigth less than 7px @300ppi in tabloid paper sizes are considered small.\r\n- outline: named colour tuple. Define the colour outline of the small, medium and large connected components, respectively.\r\n- fill: named colour tuple. Define the colour fill of the small, medium and large connected components, respectively.\r\n- mode_pass: integer/boolean tuple. Define if the connected component must be drawn if the width or heigth are several times over the mode. The tuple define these times for small, medium and large."
        }
    }, 
    {
        "pk": 8, 
        "model": "methods.function", 
        "fields": {
            "function": "activity_detector", 
            "inputs": 1, 
            "name": "Activity detector", 
            "module": "segmentation.utils", 
            "arguments": "radius=10, increment=16", 
            "description": "Based on http://www.ece.umassd.edu/faculty/acosta/icassp/icassp_2004/pdfs/0300229.pdf\r\nCreate an grayscale image according to the collision of the adjacent connected components expanded a number of pixels. The black pixels represent no activity, grayer represent more activity (collisions).\r\n- radius: integer. Number of pixels to expand de connected component in order to analyze the activity dectection.\r\n- increment: integer. Increment over the basic black color every time a collision is detected."
        }
    }, 
    {
        "pk": 9, 
        "model": "methods.function", 
        "fields": {
            "function": "draw_overlay", 
            "inputs": 2, 
            "name": "Draw overlay", 
            "module": "segmentation.utils", 
            "arguments": "colour=(255, 0, 0)", 
            "description": "Draw over the first image argument the color 'colour' using a binarized image mask as a second image input argument.\r\n- colour: integer tuple. Tuple of length 3 and with values between 0 and 255 (RGB colour)."
        }
    }, 
    {
        "pk": 10, 
        "model": "methods.function", 
        "fields": {
            "function": "extract_handwritten_text", 
            "inputs": 1, 
            "name": "Extract handwritten text", 
            "module": "segmentation.utils", 
            "arguments": "factor=2", 
            "description": "One of our algorithm created for extract handwritten text written in different colours in respect of background or foreground (machine printed) text on the image.\r\n- factor: float, float list, float tuple: Set the brightness and process the image iteratively if a list or tuple is passed."
        }
    }, 
    {
        "pk": 11, 
        "model": "methods.function", 
        "fields": {
            "function": "kfill", 
            "inputs": 1, 
            "name": "kFill", 
            "module": "segmentation.utils", 
            "arguments": "k=2", 
            "description": "kFill algorithm. Adapted to kfill modified through python-gamera from http://www.cs.buu.ac.th/~krisana/cv/paper/Apccas98.pdf\r\n- k: integer. Size of the window."
        }
    }, 
    {
        "pk": 12, 
        "model": "methods.function", 
        "fields": {
            "function": "kfill_colour", 
            "inputs": 1, 
            "name": "Coloured kFill", 
            "module": "segmentation.utils", 
            "arguments": "k=3, accuracy=0", 
            "description": "Modified kFill algorithm and inspired on paper http://www.wseas.us/e-library/conferences/2009/moscow/ISCGAV/ISCGAV09.pdf\r\n- k: integer. The size of window.\r\n- accuracy: integer. Lower limit of core pixels on."
        }
    }, 
    {
        "pk": 13, 
        "model": "methods.function", 
        "fields": {
            "function": "remove_noise", 
            "inputs": 1, 
            "name": "Noise removal", 
            "module": "segmentation.utils", 
            "arguments": "size=2", 
            "description": "Basic noise removal converting the image to grayscale, bluring with Gaussian filter and binarizing the image with Riddler-Calvard method.\r\n- size: integer. Standard deviation of the Gaussian distribution."
        }
    }, 
    {
        "pk": 14, 
        "model": "methods.function", 
        "fields": {
            "function": "filters", 
            "inputs": 1, 
            "name": "Filters", 
            "module": "segmentation.utils", 
            "arguments": "filter_list=[\"MedianFilter\"]", 
            "description": "Apply PIL Image filters.\r\nThe only arguments is a list of these strings:\r\n     * BLUR\r\n     * SHARPEN\r\n     * GaussianBlur\r\n     * SMOOTH\r\n     * CONTOUR\r\n     * SMOOTH_MORE\r\n     * DETAIL\r\n     * MaxFilter\r\n     * UnsharpMask\r\n     * EDGE_ENHANCE\r\n     * MedianFilter\r\n     * EDGE_ENHANCE_MORE\r\n     * MinFilter\r\n     * EMBOSS\r\n     * ModeFilter\r\n     * FIND_EDGES\r\n     * RankFilter"
        }
    }, 
    {
        "pk": 1, 
        "model": "methods.method", 
        "fields": {
            "name": "Process image", 
            "description": "Proceso."
        }
    }, 
    {
        "pk": 1, 
        "model": "methods.step", 
        "fields": {
            "function": 10, 
            "inputs": "0", 
            "values": "factor=[2, 0.25]", 
            "order": 1, 
            "method": 1
        }
    }, 
    {
        "pk": 2, 
        "model": "methods.step", 
        "fields": {
            "function": 13, 
            "inputs": "1", 
            "values": "", 
            "order": 2, 
            "method": 1
        }
    }, 
    {
        "pk": 3, 
        "model": "methods.step", 
        "fields": {
            "function": 9, 
            "inputs": "0,2", 
            "values": "", 
            "order": 3, 
            "method": 1
        }
    }
]